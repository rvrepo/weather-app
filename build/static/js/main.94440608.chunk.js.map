{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","location","setLocation","weather","setWeather","currTime","Math","round","Date","getTime","classes","className","sys","timezone","sunrise","sunset","push","main","temp","toLowerCase","length","join","autoFocus","type","placeholder","value","onChange","e","target","onKeyPress","key","fetch","then","res","json","result","includes","icon","faCloudSun","color","faSun","faCloud","faCloudSunRain","faCloudMoon","faCloudMoonRain","faMoon","timeArray","toGMTString","split","midnight","hrs","getCurrentTime","name","country","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAaMA,G,MACK,sDADLA,EAEC,mCAkHQC,MA/Gf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAeTC,EAAWC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC7CC,EAAU,GA+Dd,OACE,yBAAKC,UAAS,wBA3Ca,qBAAhBR,EAAQS,OACjBP,GAAsBF,EAAQU,UAEfV,EAAQS,IAAIE,SAAWT,EAAWF,EAAQS,IAAIG,OAC3DL,EAAQM,KAAK,OAEbN,EAAQM,KAAK,UAGU,oBAAhBb,EAAQc,OACbd,EAAQc,KAAKC,KAAO,GACtBR,EAAQM,KAAK,OAEbN,EAAQM,KAAK,QAEfN,EAAQM,KAAKb,EAAQA,QAAQ,GAAGc,KAAKE,gBAEhCT,EAAQU,OAAS,EAAIV,EAAQW,KAAK,KAAO,SA2B9C,2BACEC,WAAW,EACXX,UAAU,iBACVY,KAAK,OACLC,YAAY,wBACZC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAAYyB,EAAEC,OAAOH,QACtCI,WApFS,SAACF,GACA,UAAVA,EAAEG,KACJC,MAAM,GAAD,OAAIjC,GAAJ,OAAkBG,EAAlB,+BAAiDH,IACnDkC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjC,EAAY,IACZE,EAAW+B,SAgFU,qBAAjBhC,EAAQc,KACd,6BACE,yBAAKN,UAAU,eACb,gCAASL,KAAKC,MAAMJ,EAAQc,KAAKC,OADnC,UAGA,yBAAKP,UAAU,gBAAgBR,EAAQA,QAAQ,GAAGc,MAClD,yBAAKN,UAAU,SAtCjBD,EAAQ0B,SAAS,OACf1B,EAAQ0B,SAAS,UAAY1B,EAAQ0B,SAAS,UACzC,kBAAC,IAAD,CAAiBC,KAAMC,IAAYC,MAAM,SACvC7B,EAAQ0B,SAAS,SACnB,kBAAC,IAAD,CAAiBC,KAAMG,IAAOD,MAAM,SAClC7B,EAAQ0B,SAAS,UACnB,kBAAC,IAAD,CAAiBC,KAAMI,IAASF,MAAM,SACpC7B,EAAQ0B,SAAS,QACnB,kBAAC,IAAD,CAAiBC,KAAMK,IAAgBH,MAAM,cAD/C,EAIH7B,EAAQ0B,SAAS,UACZ,kBAAC,IAAD,CAAiBC,KAAMM,IAAaJ,MAAM,SACxC7B,EAAQ0B,SAAS,QACnB,kBAAC,IAAD,CAAiBC,KAAMO,IAAiBL,MAAM,SAE9C,kBAAC,IAAD,CAAiBF,KAAMQ,IAAQN,MAAM,UAuB1C,yBAAK5B,UAAU,aA/EA,WACrB,IACMmC,EADW,IAAItC,KAAgB,IAAXH,GAAiB0C,cAAcC,MAAM,KACpC,GAAGA,MAAM,KAChCC,EAAW,KACXC,EAAMJ,EAAU,GAOpB,OANII,GAAO,KACTD,EAAW,KACPC,EAAM,KACRA,GAAO,KAGL,GAAN,OAAUA,EAAV,cAAmBJ,EAAU,GAA7B,YAAmCG,GAoEDE,IAC5B,yBAAKxC,UAAU,YACb,gCACGR,EAAQiD,KADX,KACmBjD,EAAQS,IAAIyC,WAKnC,KC/GYC,QACW,cAA7BC,OAAOtD,SAASuD,UAEe,UAA7BD,OAAOtD,SAASuD,UAEhBD,OAAOtD,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.94440608.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCloudSun,\n  faSun,\n  faCloud,\n  faMoon,\n  faCloudMoon,\n  faCloudSunRain,\n  faCloudMoonRain,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\n\nconst api = {\n  baseURL: \"https://api.openweathermap.org/data/2.5/weather?q=\",\n  key: \"700f70f04cf30aa36c37d654a5c98d34\",\n};\n\nfunction App() {\n  const [location, setLocation] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.baseURL}${location}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setLocation(\"\");\n          setWeather(result);\n        });\n    }\n  };\n\n  let currTime = Math.round(new Date().getTime() / 1000);\n  let classes = [];\n\n  const getCurrentTime = () => {\n    const gmtArray = new Date(currTime * 1000).toGMTString().split(\" \");\n    const timeArray = gmtArray[4].split(\":\");\n    let midnight = \"AM\";\n    let hrs = timeArray[0];\n    if (hrs >= 12) {\n      midnight = \"PM\";\n      if (hrs > 13) {\n        hrs -= 12;\n      }\n    }\n    return `${hrs} : ${timeArray[1]} ${midnight}`;\n  };\n\n  /**\n   * This function will return set of classes to apply based on Time, Temperature\n   * and Weather Type (example Sunny, Cloudy, Haze).\n   */\n  const getWeatherType = () => {\n    if (typeof weather.sys !== \"undefined\") {\n      currTime = currTime + weather.timezone;\n\n      if (currTime > weather.sys.sunrise && currTime < weather.sys.sunset) {\n        classes.push(\"day\");\n      } else {\n        classes.push(\"night\");\n      }\n    }\n    if (typeof weather.main != \"undefined\") {\n      if (weather.main.temp > 25) {\n        classes.push(\"hot\");\n      } else {\n        classes.push(\"cold\");\n      }\n      classes.push(weather.weather[0].main.toLowerCase());\n    }\n    return classes.length > 1 ? classes.join(\" \") : \"hot\";\n  };\n\n  const getIcon = () => {\n    if (classes.includes(\"day\")) {\n      if (classes.includes(\"clear\") && classes.includes(\"clouds\")) {\n        return <FontAwesomeIcon icon={faCloudSun} color=\"#FFF\" />;\n      } else if (classes.includes(\"clear\")) {\n        return <FontAwesomeIcon icon={faSun} color=\"#FFF\" />;\n      } else if (classes.includes(\"clouds\")) {\n        return <FontAwesomeIcon icon={faCloud} color=\"#FFF\" />;\n      } else if (classes.includes(\"rain\")) {\n        return <FontAwesomeIcon icon={faCloudSunRain} color=\"#FFF\" />;\n      }\n    } else {\n      if (classes.includes(\"clouds\")) {\n        return <FontAwesomeIcon icon={faCloudMoon} color=\"#FFF\" />;\n      } else if (classes.includes(\"rain\")) {\n        return <FontAwesomeIcon icon={faCloudMoonRain} color=\"#FFF\" />;\n      } else {\n        return <FontAwesomeIcon icon={faMoon} color=\"#FFF\" />;\n      }\n    }\n  };\n\n  return (\n    <div className={`main-wrapper ${getWeatherType()}`}>\n      <input\n        autoFocus={true}\n        className=\"location-input\"\n        type=\"text\"\n        placeholder=\"Type location here...\"\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n        onKeyPress={search}\n      ></input>\n      {typeof weather.main !== \"undefined\" ? (\n        <div>\n          <div className=\"temperature\">\n            <strong>{Math.round(weather.main.temp)}</strong>Â° C\n          </div>\n          <div className=\"weather-type\">{weather.weather[0].main}</div>\n          <div className=\"icons\">{getIcon()}</div>\n          <div className=\"curr-time\">{getCurrentTime()}</div>\n          <div className=\"location\">\n            <strong>\n              {weather.name}, {weather.sys.country}\n            </strong>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}